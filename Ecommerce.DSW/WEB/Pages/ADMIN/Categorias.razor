@page "/categorias"

@inject ICategoriaService iCategoriaServicio;
@inject SweetAlertService SWAService;
@inject NavigationManager navService

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador")];


<style>
    body {
        background: #262a2d;
    }
</style>
<h1 style="color:#FFF; text-align:center; margin-top: 10px; font-weight: 900">CATEGORIAS</h1>
<div class="container-fluid" style="background-color: #262a2d;">
    <div class="row justify-content-center mt-3">
        <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
            <div class="d-grid gap-1 col-12 mx-auto">
                <a class="btn btn-primary" href="/categoria" style="font-weight:600; font-size:20px">Nueva Categoria</a>
            </div>
        </div>
        
    </div>

    <div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">
        @if (lista != null)
        {
            foreach (var item in lista)
            {
                <div class="col mb-5">
                    <div class="card h-100" style="background:#383b3d; border: 2px solid #fff; border-radius: 10px;">
                        <div class="card-body p-4">
                            <div class="text-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="50px" height="50px" fill="currentColor" class="bi bi-archive-fill" style="color:#fff" viewBox="0 0 16 16">
                                    <path d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15zM5.5 7h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1M.8 1a.8.8 0 0 0-.8.8V3a.8.8 0 0 0 .8.8h14.4A.8.8 0 0 0 16 3V1.8a.8.8 0 0 0-.8-.8z" />
                                </svg>
                                <div class="text-start" style="margin-top: 14px; text-align:center">
                                    <p class="m-1" style="color:#fff; text-transform:uppercase; font-weight: bold; font-size: 1.2rem;">Nombre:  @item.Nombre</p>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent" style="border-top: none;">
                            <div class="row justify-content-between">
                                <a class="col-5 btn btn-sm btn-primary mt-auto" href="/categoria/@item.IdCategoria">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                        <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                                    </svg>
                                </a>
                                <button class="col-5 btn btn-sm btn-danger mt-auto" type="button" @onclick="(async () => await Eliminar(item))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

            }
        }
        else
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
</div>

@code {
    private List<CategoriaDTO>? lista = null;
    private string buscar = "";


    private async Task ObtenerC(string valor = "")
    {
        var response = await iCategoriaServicio.Listar(valor);
        if (response.Correcto)
        {
            lista = (List<CategoriaDTO>)response.Resultado!;
        }
        else
        {
            lista = new List<CategoriaDTO>();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerC();
    }


    private async Task Eliminar(CategoriaDTO modelo)
    {
        SweetAlertResult result = await SWAService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Seguro?",
                Text = $"Eliminar categoria: {modelo.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "ELIMINAR",
                CancelButtonText = "CANCELAR"
            });

        if (result.IsConfirmed)
        {
            var response = await iCategoriaServicio.Eliminar(modelo.IdCategoria);
            if (response.Correcto)
            {
                await ObtenerC();
                await SWAService.FireAsync(response.Mensaje);
                navService.Refresh();
            }
            else
            {
                await SWAService.FireAsync("Eliminado!");
                navService.Refresh();

            }
        }
    }
}
