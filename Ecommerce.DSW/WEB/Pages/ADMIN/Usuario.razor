@page "/usuario"
@page "/usuario/{id:int}"


@inject IUsuarioService iUsuarioServicio;
@inject SweetAlertService SWAService;
@inject NavigationManager navService ;

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles="Administrador")];



<style>
    body {
        background-color: #262a2d;
    }
</style>

<h1 style="color:#FFF; text-align:center; margin-top: 10px; font-weight: 900">@Titulo</h1>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10" style="width:500px">
        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group">
                <input type="text" class="form-control" placeholder="Nombre Completo" @bind-value="modelo.NombreCompleto">
            </div>
            <ValidationMessage For="@(()=>modelo.NombreCompleto)" />

            <div class="input-group mt-3">
                <input type="text" class="form-control" placeholder="Correo" @bind-value="modelo.Correo"><br />
            </div>
            <ValidationMessage For="@(()=>modelo.Correo)" />

            <div class="input-group mt-3">
                <input type="password" class="form-control" placeholder="Contraseña" @bind-value="modelo.Clave">
            </div>
            <ValidationMessage For="@(()=>modelo.Clave)" />

            <div class="input-group mt-3">
                <input type="password" class="form-control" placeholder="Confirmar Contraseña" @bind-value="modelo.ConfirmarClave">
            </div>
            <ValidationMessage For="@(()=>modelo.ConfirmarClave)" />

            <div class="mt-3" style="margin-left:6rem">
                <button type="submit" class="btn btn-primary" style="font-weight:600; font-size:20px;width:150px">@boton</button>
                <a href="/usuarios" class="btn btn-secondary" style="font-weight:600; font-size:20px;width:150px">Volver</a>
            </div>
        </EditForm>
       

    </div>

</div>


@code {

    [Parameter]
    public int id { get; set; }
    private string Titulo = "Nuevo Usuario";
    private string boton = "Crear";
    private UsuarioDTO modelo = new UsuarioDTO();


    protected override async Task OnParametersSetAsync()
    {
        if(id != 0)
        {
            Titulo = "Editar Usuario";
            boton = "Actualizar";

            var response = await iUsuarioServicio.Obtener(id);
            if (response.Correcto!)
            {
                modelo = (UsuarioDTO)response.Resultado!;
                modelo.ConfirmarClave = modelo.Clave;
            }
            else
                await SWAService.FireAsync(response.Mensaje);
        }
    }

    private async Task GuardarCambios()
    {
        if (modelo.Clave != modelo.ConfirmarClave)
        {
            await SWAService.FireAsync("Las contraseñas no coinciden");
            return;
        }

        bool respuesta = true;
        string mensaje = string.Empty;

        if (id != 0)
        {
            var response = await iUsuarioServicio.Editar(modelo);
            if (response.Correcto)
            {
                mensaje = "No se logro modificar";
            }
            else
            {
                respuesta = false;
                mensaje = "Modificado";
            }
        }
        else
        {
            modelo.Rol = "Administrador";
            var response = await iUsuarioServicio.Crear(modelo);

            if (response.Correcto)
            {
                mensaje = "Usuario creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se logro crear";
            }
        }

        if (respuesta)
        {
            await SWAService.FireAsync(mensaje);
            navService.NavigateTo("/usuarios");
        }
        else
        {
            await SWAService.FireAsync(mensaje);
            navService.NavigateTo("/usuarios");
        }
    }

}
