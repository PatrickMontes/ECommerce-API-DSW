@page "/producto"
@page "/producto/{Id:int}"


@inject IProductoService iProductoService;
@inject ICategoriaService iCategoriaService;
@inject SweetAlertService SWAService;
@inject NavigationManager navService ;

@attribute [Authorize(Roles = "Administrador")];


<style>
    body {
        background-color: #262a2d;
    }
</style>

<h1 style="color:#FFF; text-align:center; margin-top: 10px; font-weight: 900">@Titulo</h1>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10" style="width:500px">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Nombre Producto" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <textarea class="form-control" placeholder="Descripcion" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach (var item in listCat)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <input type="number" class="form-control" placeholder="Precio Producto" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <input type="number" class="form-control" placeholder="Precio Oferta" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />

            <div class="input-group mt-3">
                <input type="number" class="form-control" placeholder="Cantidad" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3" style="margin-left:6rem">
                <button type="submit" class="btn btn-primary" style="font-weight:600; font-size:20px;width:150px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="font-weight:600; font-size:20px;width:150px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>


@code {

    [Parameter]
    public int id { get; set; }
    private string Titulo = "Nueva Producto";
    private string boton = "Crear";
    private List<CategoriaDTO> listCat = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();



    protected override async Task OnInitializedAsync()
    {
        var response = await iCategoriaService.Listar("");
        if (response.Correcto)
        {
            listCat = (List<CategoriaDTO>)response.Resultado!;
            if (listCat.Any() && id == 0)
            {
                modelo.IdCategoria = listCat.First().IdCategoria;
            }
        }
    }



    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Titulo = "Editar Producto";
            boton = "Actualizar";

            var response = await iProductoService.Obtener(id);
            if (response.Correcto!)
            {
                modelo = (ProductoDTO)response.Resultado!;
            }
            else
                await SWAService.FireAsync(response.Mensaje);
        }
    }



    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }



    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        if (fileInfo.Extension.ToLower().Contains("jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];

            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            modelo.Imagen = imageData;
        }
    }



    private async Task GuardarCambios()
    {

        bool respuesta = true;
        string mensaje = string.Empty;

        if (id != 0)
        {
            var response = await iProductoService.Editar(modelo);
            if (response.Correcto)
            {
                mensaje = "No se logro modificar";
            }
            else
            {
                respuesta = false;
                mensaje = "Modificado";
            }
        }
        else
        {
            var response = await iProductoService.Crear(modelo);

            if (response.Correcto)
            {
                mensaje = "Producto creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se logro crear";
            }
        }

        if (respuesta)
        {
            await SWAService.FireAsync(mensaje);
            navService.NavigateTo("/productos");
        }
        else
        {
            await SWAService.FireAsync(mensaje);
            navService.NavigateTo("/productos");
        }
    }
}
